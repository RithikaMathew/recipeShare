{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rithi\\\\OneDrive\\\\Desktop\\\\web stack\\\\final\\\\client\\\\src\\\\pages\\\\ReadPosts.js\",\n  _s = $RefreshSig$();\nread;\nimport React, { useState, useEffect } from 'react';\nimport Card from '../components/Card';\nimport './ReadPosts.css';\nimport { supabase } from '../client';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReadPosts = ({\n  posts\n}) => {\n  _s();\n  const [filteredPosts, setFilteredPosts] = useState(posts);\n  const [searchQuery, setSearchQuery] = useState('');\n  useEffect(() => {\n    // Apply filtering directly here based on the search query\n    const filtered = posts.filter(post => post.title.toLowerCase().includes(searchQuery.toLowerCase()));\n    setFilteredPosts(filtered);\n  }, [posts, searchQuery]); // React to changes in `posts` or `searchQuery`\n\n  const sortByUpvotes = () => {\n    const sorted = [...filteredPosts].sort((a, b) => b.upvotes - a.upvotes);\n    setFilteredPosts(sorted);\n  };\n  const sortByRecent = () => {\n    const sorted = [...filteredPosts].sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n    setFilteredPosts(sorted);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ReadPosts\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search by title...\",\n      value: searchQuery,\n      onChange: e => setSearchQuery(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sortByUpvotes,\n      children: \"Most Popular\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sortByRecent,\n      children: \"Most Recent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), filteredPosts && filteredPosts.length > 0 ? filteredPosts.map((post, index) => /*#__PURE__*/_jsxDEV(Card, {\n      id: post.id,\n      title: post.title,\n      author: post.author,\n      createdAt: post.created_at\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: 'black'\n      },\n      children: 'No matching posts ðŸ˜ž'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(ReadPosts, \"VYeE/gbWZ343AGlRaeCTiSujIf4=\");\n_c = ReadPosts;\nexport default ReadPosts;\nvar _c;\n$RefreshReg$(_c, \"ReadPosts\");","map":{"version":3,"names":["read","React","useState","useEffect","Card","supabase","useParams","jsxDEV","_jsxDEV","ReadPosts","posts","_s","filteredPosts","setFilteredPosts","searchQuery","setSearchQuery","filtered","filter","post","title","toLowerCase","includes","sortByUpvotes","sorted","sort","a","b","upvotes","sortByRecent","Date","created_at","className","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","index","id","author","createdAt","style","color","_c","$RefreshReg$"],"sources":["C:/Users/rithi/OneDrive/Desktop/web stack/final/client/src/pages/ReadPosts.js"],"sourcesContent":["read \n\nimport React, { useState, useEffect } from 'react';\nimport Card from '../components/Card';\nimport './ReadPosts.css';\nimport { supabase } from '../client';\nimport { useParams } from 'react-router-dom';\n\nconst ReadPosts = ({ posts }) => {\n    const [filteredPosts, setFilteredPosts] = useState(posts);\n    const [searchQuery, setSearchQuery] = useState('');\n\n    \n\n    useEffect(() => {\n        // Apply filtering directly here based on the search query\n        const filtered = posts.filter(post => \n            post.title.toLowerCase().includes(searchQuery.toLowerCase())\n        );\n        setFilteredPosts(filtered);\n    }, [posts, searchQuery]); // React to changes in `posts` or `searchQuery`\n\n    const sortByUpvotes = () => {\n        const sorted = [...filteredPosts].sort((a, b) => b.upvotes - a.upvotes);\n        setFilteredPosts(sorted);\n    };\n\n    const sortByRecent = () => {\n        const sorted = [...filteredPosts].sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n        setFilteredPosts(sorted);\n    };\n\n    return (\n        <div className=\"ReadPosts\">\n            <input\n                type=\"text\"\n                placeholder=\"Search by title...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n            />\n            <button onClick={sortByUpvotes}>Most Popular</button>\n            <button onClick={sortByRecent}>Most Recent</button>\n            {filteredPosts && filteredPosts.length > 0 ? (\n                filteredPosts.map((post, index) => (\n                    <Card\n                        key={index}\n                        id={post.id}\n                        title={post.title}\n                        author={post.author}\n                        createdAt={post.created_at}\n                    />\n                ))\n            ) : (\n                <h2 style={{ color: 'black' }}>{'No matching posts ðŸ˜ž'}</h2>\n            )}\n        </div>\n    );\n};\n\nexport default ReadPosts;"],"mappings":";;AAAAA,IAAI;AAEJ,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAO,iBAAiB;AACxB,SAASC,QAAQ,QAAQ,WAAW;AACpC,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAACQ,KAAK,CAAC;EACzD,MAAM,CAACI,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAIlDC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMa,QAAQ,GAAGN,KAAK,CAACO,MAAM,CAACC,IAAI,IAC9BA,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACP,WAAW,CAACM,WAAW,CAAC,CAAC,CAC/D,CAAC;IACDP,gBAAgB,CAACG,QAAQ,CAAC;EAC9B,CAAC,EAAE,CAACN,KAAK,EAAEI,WAAW,CAAC,CAAC,CAAC,CAAC;;EAE1B,MAAMQ,aAAa,GAAGA,CAAA,KAAM;IACxB,MAAMC,MAAM,GAAG,CAAC,GAAGX,aAAa,CAAC,CAACY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,OAAO,GAAGF,CAAC,CAACE,OAAO,CAAC;IACvEd,gBAAgB,CAACU,MAAM,CAAC;EAC5B,CAAC;EAED,MAAMK,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAML,MAAM,GAAG,CAAC,GAAGX,aAAa,CAAC,CAACY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIG,IAAI,CAACH,CAAC,CAACI,UAAU,CAAC,GAAG,IAAID,IAAI,CAACJ,CAAC,CAACK,UAAU,CAAC,CAAC;IACjGjB,gBAAgB,CAACU,MAAM,CAAC;EAC5B,CAAC;EAED,oBACIf,OAAA;IAAKuB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtBxB,OAAA;MACIyB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,oBAAoB;MAChCC,KAAK,EAAErB,WAAY;MACnBsB,QAAQ,EAAGC,CAAC,IAAKtB,cAAc,CAACsB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC,eACFlC,OAAA;MAAQmC,OAAO,EAAErB,aAAc;MAAAU,QAAA,EAAC;IAAY;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrDlC,OAAA;MAAQmC,OAAO,EAAEf,YAAa;MAAAI,QAAA,EAAC;IAAW;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAClD9B,aAAa,IAAIA,aAAa,CAACgC,MAAM,GAAG,CAAC,GACtChC,aAAa,CAACiC,GAAG,CAAC,CAAC3B,IAAI,EAAE4B,KAAK,kBAC1BtC,OAAA,CAACJ,IAAI;MAED2C,EAAE,EAAE7B,IAAI,CAAC6B,EAAG;MACZ5B,KAAK,EAAED,IAAI,CAACC,KAAM;MAClB6B,MAAM,EAAE9B,IAAI,CAAC8B,MAAO;MACpBC,SAAS,EAAE/B,IAAI,CAACY;IAAW,GAJtBgB,KAAK;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKb,CACJ,CAAC,gBAEFlC,OAAA;MAAI0C,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAQ,CAAE;MAAAnB,QAAA,EAAE;IAAsB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAC9D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC/B,EAAA,CAjDIF,SAAS;AAAA2C,EAAA,GAAT3C,SAAS;AAmDf,eAAeA,SAAS;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}