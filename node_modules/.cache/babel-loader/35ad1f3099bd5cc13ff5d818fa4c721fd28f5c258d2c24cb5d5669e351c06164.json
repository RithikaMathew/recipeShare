{"ast":null,"code":"import React,{useState,useEffect}from'react';import Card from'../components/Card';import'./ReadPosts.css';import{supabase}from'../client';import{useParams}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ReadPosts=_ref=>{let{posts}=_ref;const[filteredPosts,setFilteredPosts]=useState([]);const[searchQuery,setSearchQuery]=useState('');// Function to sort by recent\nconst sortByRecent=()=>{const sorted=[...posts].sort((a,b)=>new Date(b.created_at)-new Date(a.created_at));setFilteredPosts(sorted);};useEffect(()=>{// Apply filtering directly here based on the search query\nconst filtered=posts.filter(post=>post.title.toLowerCase().includes(searchQuery.toLowerCase()));setFilteredPosts(filtered);},[posts,searchQuery]);// React to changes in `posts` or `searchQuery`\n// Sort by recent on component mount\nuseEffect(()=>{sortByRecent();},[posts]);// Ensure this runs only once when the component mounts or when `posts` changes\nconst sortByUpvotes=()=>{const sorted=[...filteredPosts].sort((a,b)=>{// Ensure we have valid numbers for comparison\nconst upvotesA=Number(a.upvotes)||0;const upvotesB=Number(b.upvotes)||0;return upvotesB-upvotesA;});setFilteredPosts(sorted);};return/*#__PURE__*/_jsxs(\"div\",{className:\"ReadPosts\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"filter\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search by title...\",value:searchQuery,onChange:e=>setSearchQuery(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:sortByUpvotes,children:\"Most Popular\"}),/*#__PURE__*/_jsx(\"button\",{onClick:sortByRecent,children:\"Most Recent\"})]}),filteredPosts&&filteredPosts.length>0?filteredPosts.map((post,index)=>/*#__PURE__*/_jsx(Card,{id:post.id,title:post.title,author:post.author,createdAt:post.created_at},index)):/*#__PURE__*/_jsx(\"h2\",{style:{color:'black'},children:'No matching posts ðŸ˜ž'})]});};export default ReadPosts;","map":{"version":3,"names":["React","useState","useEffect","Card","supabase","useParams","jsx","_jsx","jsxs","_jsxs","ReadPosts","_ref","posts","filteredPosts","setFilteredPosts","searchQuery","setSearchQuery","sortByRecent","sorted","sort","a","b","Date","created_at","filtered","filter","post","title","toLowerCase","includes","sortByUpvotes","upvotesA","Number","upvotes","upvotesB","className","children","type","placeholder","value","onChange","e","target","onClick","length","map","index","id","author","createdAt","style","color"],"sources":["C:/Users/rithi/OneDrive/Desktop/web stack/final - Copy/client/src/pages/ReadPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from '../components/Card';\nimport './ReadPosts.css';\nimport { supabase } from '../client';\nimport { useParams } from 'react-router-dom';\n\nconst ReadPosts = ({ posts }) => {\n    const [filteredPosts, setFilteredPosts] = useState([]);\n    const [searchQuery, setSearchQuery] = useState('');\n\n    // Function to sort by recent\n    const sortByRecent = () => {\n        const sorted = [...posts].sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n        setFilteredPosts(sorted);\n    };\n\n    useEffect(() => {\n        // Apply filtering directly here based on the search query\n        const filtered = posts.filter(post => \n            post.title.toLowerCase().includes(searchQuery.toLowerCase())\n        );\n        setFilteredPosts(filtered);\n    }, [posts, searchQuery]); // React to changes in `posts` or `searchQuery`\n\n    // Sort by recent on component mount\n    useEffect(() => {\n        sortByRecent();\n    }, [posts]); // Ensure this runs only once when the component mounts or when `posts` changes\n\n    const sortByUpvotes = () => {\n        const sorted = [...filteredPosts].sort((a, b) => {\n            // Ensure we have valid numbers for comparison\n            const upvotesA = Number(a.upvotes) || 0;\n            const upvotesB = Number(b.upvotes) || 0;\n            return upvotesB - upvotesA;\n        });\n        setFilteredPosts(sorted);\n    };\n\n    return (\n        <div className=\"ReadPosts\">\n            <div className=\"filter\">\n            <input\n                type=\"text\"\n                placeholder=\"Search by title...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n            />\n            <button onClick={sortByUpvotes}>Most Popular</button>\n            <button onClick={sortByRecent}>Most Recent</button>\n            </div>\n            {filteredPosts && filteredPosts.length > 0 ? (\n                filteredPosts.map((post, index) => (\n                    <Card\n                        key={index}\n                        id={post.id}\n                        title={post.title}\n                        author={post.author}\n                        createdAt={post.created_at}\n                    />\n                ))\n            ) : (\n                <h2 style={{ color: 'black' }}>{'No matching posts ðŸ˜ž'}</h2>\n            )}\n        </div>\n    );\n};\n\nexport default ReadPosts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}