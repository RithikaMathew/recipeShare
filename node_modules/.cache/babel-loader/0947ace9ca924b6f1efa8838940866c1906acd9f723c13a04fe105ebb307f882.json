{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rithi\\\\OneDrive\\\\Desktop\\\\web stack\\\\final\\\\client\\\\src\\\\pages\\\\DetailView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { supabase } from '../client';\nimport './DetailView.css';\nimport { formatDistanceToNow } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DetailView = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState({});\n  const [count, setCount] = useState(0);\n  const [comment, setComment] = useState(\"\");\n  const [comments, setComments] = useState([]); // State to store fetched comments\n  // Step 1: State for comment text\n\n  useEffect(() => {\n    const fetchPost = async () => {\n      const {\n        data\n      } = await supabase.from('Posts').select().eq('id', id).single();\n      setPost(data);\n    };\n    fetchPost();\n  }, [id]);\n  useEffect(() => {\n    const fetchCount = async () => {\n      const {\n        data\n      } = await supabase.from('Posts').select('upvotes').eq('id', id).single();\n      setCount(data.upvotes);\n    };\n    fetchCount();\n  }, [id]);\n  const updateCount = async event => {\n    event.preventDefault();\n    await supabase.from('Posts').update({\n      upvotes: count + 1\n    }).eq('id', id);\n    setCount(count => count + 1);\n  };\n  const deletePost = async event => {\n    event.preventDefault();\n    await supabase.from('Posts').delete().eq('id', id);\n    window.location = \"/read\";\n  };\n  const submitComment = async event => {\n    event.preventDefault(); // Prevent the default form submission behavior\n    if (!comment.trim()) return; // Ignore empty comments\n\n    try {\n      const {\n        error\n      } = await supabase.from('Comments') // Ensure this is the correct table name\n      .insert([{\n        postId: id,\n        comment: comment\n      } // Assuming 'postId' is the correct field name\n      ]);\n      setComments(comments => [...comments, {\n        comment\n      }]); // Update the comments list with the new comment\n      setComment(\"\"); // Clear the comment input field\n      // Optionally, refresh comments list here\n    } catch (error) {\n      console.error('Error submitting comment:', error.message);\n      // Handle the error appropriately (e.g., display a message to the user)\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DetailView\",\n    children: [post.created_at && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Posted \", formatDistanceToNow(new Date(post.created_at), {\n        addSuffix: true\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Title: \" + post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), post.image && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: post.image,\n      alt: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Info:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Author: \" + post.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Description: \" + post.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateCount,\n      children: [\"Upvotes: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/edit/${id}`,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" \\uD83D\\uDD8B\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deletePost,\n      children: \" \\uD83D\\uDDD1\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: comment.comment\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this) // Assuming your comment records have a 'comment' field\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitComment,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: comment,\n          onChange: e => setComment(e.target.value),\n          placeholder: \"Write a comment...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(DetailView, \"XmTTdn3XYNDTlloNbIPz1R46zok=\", false, function () {\n  return [useParams];\n});\n_c = DetailView;\nexport default DetailView;\nvar _c;\n$RefreshReg$(_c, \"DetailView\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","supabase","formatDistanceToNow","jsxDEV","_jsxDEV","DetailView","_s","id","post","setPost","count","setCount","comment","setComment","comments","setComments","fetchPost","data","from","select","eq","single","fetchCount","upvotes","updateCount","event","preventDefault","update","deletePost","delete","window","location","submitComment","trim","error","insert","postId","console","message","className","children","created_at","Date","addSuffix","fileName","_jsxFileName","lineNumber","columnNumber","title","image","src","alt","author","description","onClick","to","map","index","onSubmit","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/rithi/OneDrive/Desktop/web stack/final/client/src/pages/DetailView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { supabase } from '../client';\r\nimport './DetailView.css';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\nconst DetailView = () => {\r\n  const { id } = useParams();\r\n  const [post, setPost] = useState({});\r\n  const [count, setCount] = useState(0);\r\n  const [comment, setComment] = useState(\"\");\r\n  const [comments, setComments] = useState([]); // State to store fetched comments\r\n  // Step 1: State for comment text\r\n\r\n  useEffect(() => {\r\n    const fetchPost = async () => {\r\n      const { data } = await supabase\r\n        .from('Posts')\r\n        .select()\r\n        .eq('id', id)\r\n        .single();\r\n\r\n      setPost(data);\r\n    };\r\n\r\n    fetchPost();\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    const fetchCount = async () => {\r\n      const { data } = await supabase\r\n        .from('Posts')\r\n        .select('upvotes')\r\n        .eq('id', id)\r\n        .single();\r\n\r\n      setCount(data.upvotes);\r\n    };\r\n\r\n    fetchCount();\r\n  }, [id]);\r\n\r\n  const updateCount = async (event) => {\r\n    event.preventDefault();\r\n\r\n    await supabase\r\n      .from('Posts')\r\n      .update({ upvotes: count + 1 })\r\n      .eq('id', id);\r\n\r\n    setCount((count) => count + 1);\r\n  };\r\n\r\n  const deletePost = async (event) => {\r\n    event.preventDefault();\r\n    await supabase\r\n      .from('Posts')\r\n      .delete()\r\n      .eq('id', id);\r\n    window.location = \"/read\";\r\n  };\r\n\r\n  const submitComment = async (event) => {\r\n    event.preventDefault(); // Prevent the default form submission behavior\r\n    if (!comment.trim()) return; // Ignore empty comments\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('Comments') // Ensure this is the correct table name\r\n        .insert([\r\n          { postId: id, comment: comment } // Assuming 'postId' is the correct field name\r\n        ]);\r\n\r\n      setComments((comments) => [...comments, { comment }]); // Update the comments list with the new comment\r\n      setComment(\"\"); // Clear the comment input field\r\n      // Optionally, refresh comments list here\r\n    } catch (error) {\r\n      console.error('Error submitting comment:', error.message);\r\n      // Handle the error appropriately (e.g., display a message to the user)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"DetailView\">\r\n      {post.created_at && (\r\n        <p>Posted {formatDistanceToNow(new Date(post.created_at), { addSuffix: true })}</p>\r\n      )}\r\n      <h2>{\"Title: \" + post.title}</h2>\r\n      {post.image && (<img src={post.image} alt={post.title} />)}\r\n      <h3>Info:</h3>\r\n      <p>{\"Author: \" + post.author}</p>\r\n      <p>{\"Description: \" + post.description}</p>\r\n      <button onClick={updateCount}>Upvotes: {count}</button>\r\n      <Link to={`/edit/${id}`}><button> 🖋️</button></Link>\r\n      <button onClick={deletePost}> 🗑️</button>\r\n      <div>\r\n        {comments.map((comment, index) => (\r\n          <p key={index}>{comment.comment}</p> // Assuming your comment records have a 'comment' field\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <h3>Comments</h3>\r\n        <form onSubmit={submitComment}>\r\n          <input\r\n            type=\"text\"\r\n            value={comment}\r\n            onChange={(e) => setComment(e.target.value)}\r\n            placeholder=\"Write a comment...\"\r\n          />\r\n          <button type=\"submit\">Submit Comment</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailView;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAClD,SAASC,QAAQ,QAAQ,WAAW;AACpC,OAAO,kBAAkB;AACzB,SAASC,mBAAmB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAG,CAAC,GAAGR,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C;;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMkB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMhB,QAAQ,CAC5BiB,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,CAAC,CACRC,EAAE,CAAC,IAAI,EAAEb,EAAE,CAAC,CACZc,MAAM,CAAC,CAAC;MAEXZ,OAAO,CAACQ,IAAI,CAAC;IACf,CAAC;IAEDD,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACT,EAAE,CAAC,CAAC;EAERT,SAAS,CAAC,MAAM;IACd,MAAMwB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAM;QAAEL;MAAK,CAAC,GAAG,MAAMhB,QAAQ,CAC5BiB,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,SAAS,CAAC,CACjBC,EAAE,CAAC,IAAI,EAAEb,EAAE,CAAC,CACZc,MAAM,CAAC,CAAC;MAEXV,QAAQ,CAACM,IAAI,CAACM,OAAO,CAAC;IACxB,CAAC;IAEDD,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACf,EAAE,CAAC,CAAC;EAER,MAAMiB,WAAW,GAAG,MAAOC,KAAK,IAAK;IACnCA,KAAK,CAACC,cAAc,CAAC,CAAC;IAEtB,MAAMzB,QAAQ,CACXiB,IAAI,CAAC,OAAO,CAAC,CACbS,MAAM,CAAC;MAAEJ,OAAO,EAAEb,KAAK,GAAG;IAAE,CAAC,CAAC,CAC9BU,EAAE,CAAC,IAAI,EAAEb,EAAE,CAAC;IAEfI,QAAQ,CAAED,KAAK,IAAKA,KAAK,GAAG,CAAC,CAAC;EAChC,CAAC;EAED,MAAMkB,UAAU,GAAG,MAAOH,KAAK,IAAK;IAClCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAMzB,QAAQ,CACXiB,IAAI,CAAC,OAAO,CAAC,CACbW,MAAM,CAAC,CAAC,CACRT,EAAE,CAAC,IAAI,EAAEb,EAAE,CAAC;IACfuB,MAAM,CAACC,QAAQ,GAAG,OAAO;EAC3B,CAAC;EAED,MAAMC,aAAa,GAAG,MAAOP,KAAK,IAAK;IACrCA,KAAK,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;IACxB,IAAI,CAACd,OAAO,CAACqB,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC;;IAE7B,IAAI;MACF,MAAM;QAAEC;MAAM,CAAC,GAAG,MAAMjC,QAAQ,CAC7BiB,IAAI,CAAC,UAAU,CAAC,CAAC;MAAA,CACjBiB,MAAM,CAAC,CACN;QAAEC,MAAM,EAAE7B,EAAE;QAAEK,OAAO,EAAEA;MAAQ,CAAC,CAAC;MAAA,CAClC,CAAC;MAEJG,WAAW,CAAED,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAE;QAAEF;MAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MACvDC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;MAChB;IACF,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACI,OAAO,CAAC;MACzD;IACF;EACF,CAAC;EAED,oBACElC,OAAA;IAAKmC,SAAS,EAAC,YAAY;IAAAC,QAAA,GACxBhC,IAAI,CAACiC,UAAU,iBACdrC,OAAA;MAAAoC,QAAA,GAAG,SAAO,EAACtC,mBAAmB,CAAC,IAAIwC,IAAI,CAAClC,IAAI,CAACiC,UAAU,CAAC,EAAE;QAAEE,SAAS,EAAE;MAAK,CAAC,CAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CACnF,eACD3C,OAAA;MAAAoC,QAAA,EAAK,SAAS,GAAGhC,IAAI,CAACwC;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAChCvC,IAAI,CAACyC,KAAK,iBAAK7C,OAAA;MAAK8C,GAAG,EAAE1C,IAAI,CAACyC,KAAM;MAACE,GAAG,EAAE3C,IAAI,CAACwC;IAAM;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAE,eAC1D3C,OAAA;MAAAoC,QAAA,EAAI;IAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACd3C,OAAA;MAAAoC,QAAA,EAAI,UAAU,GAAGhC,IAAI,CAAC4C;IAAM;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjC3C,OAAA;MAAAoC,QAAA,EAAI,eAAe,GAAGhC,IAAI,CAAC6C;IAAW;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3C3C,OAAA;MAAQkD,OAAO,EAAE9B,WAAY;MAAAgB,QAAA,GAAC,WAAS,EAAC9B,KAAK;IAAA;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eACvD3C,OAAA,CAACJ,IAAI;MAACuD,EAAE,EAAG,SAAQhD,EAAG,EAAE;MAAAiC,QAAA,eAACpC,OAAA;QAAAoC,QAAA,EAAQ;MAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrD3C,OAAA;MAAQkD,OAAO,EAAE1B,UAAW;MAAAY,QAAA,EAAC;IAAI;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC1C3C,OAAA;MAAAoC,QAAA,EACG1B,QAAQ,CAAC0C,GAAG,CAAC,CAAC5C,OAAO,EAAE6C,KAAK,kBAC3BrD,OAAA;QAAAoC,QAAA,EAAgB5B,OAAO,CAACA;MAAO,GAAvB6C,KAAK;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAsB,CAAC,CAAC;MACtC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN3C,OAAA;MAAAoC,QAAA,gBACEpC,OAAA;QAAAoC,QAAA,EAAI;MAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjB3C,OAAA;QAAMsD,QAAQ,EAAE1B,aAAc;QAAAQ,QAAA,gBAC5BpC,OAAA;UACEuD,IAAI,EAAC,MAAM;UACXC,KAAK,EAAEhD,OAAQ;UACfiD,QAAQ,EAAGC,CAAC,IAAKjD,UAAU,CAACiD,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAC5CI,WAAW,EAAC;QAAoB;UAAApB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjC,CAAC,eACF3C,OAAA;UAAQuD,IAAI,EAAC,QAAQ;UAAAnB,QAAA,EAAC;QAAc;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzC,EAAA,CA5GID,UAAU;EAAA,QACCN,SAAS;AAAA;AAAAkE,EAAA,GADpB5D,UAAU;AA8GhB,eAAeA,UAAU;AAAC,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}