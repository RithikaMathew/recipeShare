{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rithi\\\\OneDrive\\\\Desktop\\\\web stack\\\\final - Copy\\\\client\\\\src\\\\pages\\\\DetailView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport { supabase } from '../client';\nimport './DetailView.css';\nimport { formatDistanceToNow } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DetailView = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState({});\n  const [count, setCount] = useState(0);\n  const [comment, setComment] = useState(\"\");\n  const [comments, setComments] = useState([]); // State to store fetched comments\n  // Step 1: State for comment text\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchPost = async () => {\n      const {\n        data\n      } = await supabase.from('Posts').select().eq('id', id).single();\n      setPost(data);\n    };\n    fetchPost();\n  }, [id]);\n  useEffect(() => {\n    const fetchCount = async () => {\n      const {\n        data\n      } = await supabase.from('Posts').select('upvotes').eq('id', id).single();\n      if (data) {\n        setCount(data.upvotes);\n      } else {\n        console.error('No data returned from query');\n        setCount(0); // set count to 0 if no data is returned\n      }\n    };\n    fetchCount();\n  }, [id]);\n  const updateCount = async event => {\n    event.preventDefault();\n    await supabase.from('Posts').update({\n      upvotes: count + 1\n    }).eq('id', id);\n    setCount(count => count + 1);\n  };\n  const deletePost = async event => {\n    event.preventDefault();\n    await supabase.from('Posts').delete().eq('id', id);\n    navigate('/read');\n  };\n  useEffect(() => {\n    const fetchComments = async () => {\n      const {\n        data,\n        error\n      } = await supabase.from('Comments') // Make sure this matches your table name\n      .select().eq('postId', id); // Ensure 'postId' matches the column name in your Comments table that references the post ID\n\n      if (error) {\n        console.error('Error fetching comments:', error.message);\n      } else {\n        setComments(data);\n      }\n    };\n    fetchComments();\n  }, [id]); // Re-fetch comments when the post ID changes\n\n  const submitComment = async event => {\n    event.preventDefault(); // Prevent the default form submission behavior\n    if (!comment.trim()) return; // Ignore empty comments\n\n    try {\n      const {\n        error\n      } = await supabase.from('Comments') // Ensure this is the correct table name\n      .insert([{\n        postId: id,\n        comment: comment\n      } // Assuming 'postId' is the correct field name\n      ]);\n      if (error) {\n        console.error('Error submitting comment:', error.message);\n      } else {\n        // Optionally, refresh comments list here\n        // This could be a call to fetchComments() if you define it outside useEffect\n        const {\n          data,\n          error\n        } = await supabase.from('Comments').select().eq('postId', id);\n        if (error) {\n          console.error('Error fetching comments:', error.message);\n        } else {\n          setComments(data);\n        }\n      }\n      setComment(\"\"); // Clear the comment input field\n    } catch (error) {\n      console.error('Error submitting comment:', error.message);\n      // Handle the error appropriately (e.g., display a message to the user)\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DetailView\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row1\",\n      children: [post.created_at && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Posted \", formatDistanceToNow(new Date(post.created_at), {\n          addSuffix: true\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/edit/${id}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \" \\uD83D\\uDD8B\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 32\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deletePost,\n        children: \" \\uD83D\\uDDD1\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Title: \" + post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), post.image && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: post.image,\n      alt: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Author: \" + post.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Description: \" + post.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"up\",\n      onClick: updateCount,\n      children: [\"\\uD83D\\uDC4D \", count, \" upvotes\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: comment.comment\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 5\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitComment,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: comment,\n          onChange: e => setComment(e.target.value),\n          placeholder: \"Write a comment...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(DetailView, \"yEa6EVSMpS8EoDgGvAJKVC/LqGU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = DetailView;\nexport default DetailView;\nvar _c;\n$RefreshReg$(_c, \"DetailView\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","useNavigate","supabase","formatDistanceToNow","jsxDEV","_jsxDEV","DetailView","_s","id","post","setPost","count","setCount","comment","setComment","comments","setComments","navigate","fetchPost","data","from","select","eq","single","fetchCount","upvotes","console","error","updateCount","event","preventDefault","update","deletePost","delete","fetchComments","message","submitComment","trim","insert","postId","className","children","created_at","Date","addSuffix","fileName","_jsxFileName","lineNumber","columnNumber","to","onClick","title","image","src","alt","author","description","map","index","onSubmit","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/rithi/OneDrive/Desktop/web stack/final - Copy/client/src/pages/DetailView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, Link,useNavigate } from 'react-router-dom';\r\nimport { supabase } from '../client';\r\nimport './DetailView.css';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\nconst DetailView = () => {\r\n  const { id } = useParams();\r\n  const [post, setPost] = useState({});\r\n  const [count, setCount] = useState(0);\r\n  const [comment, setComment] = useState(\"\");\r\n  const [comments, setComments] = useState([]); // State to store fetched comments\r\n  // Step 1: State for comment text\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchPost = async () => {\r\n      const { data } = await supabase\r\n        .from('Posts')\r\n        .select()\r\n        .eq('id', id)\r\n        .single();\r\n\r\n      setPost(data);\r\n    };\r\n\r\n    fetchPost();\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    const fetchCount = async () => {\r\n      const { data } = await supabase\r\n        .from('Posts')\r\n        .select('upvotes')\r\n        .eq('id', id)\r\n        .single();\r\n  \r\n      if (data) {\r\n        setCount(data.upvotes);\r\n      } else {\r\n        console.error('No data returned from query');\r\n        setCount(0); // set count to 0 if no data is returned\r\n      }\r\n    };\r\n  \r\n    fetchCount();\r\n  }, [id]);\r\n\r\n  const updateCount = async (event) => {\r\n    event.preventDefault();\r\n\r\n    await supabase\r\n      .from('Posts')\r\n      .update({ upvotes: count + 1 })\r\n      .eq('id', id);\r\n\r\n    setCount((count) => count + 1);\r\n  };\r\n\r\n  const deletePost = async (event) => {\r\n    event.preventDefault();\r\n    await supabase\r\n      .from('Posts')\r\n      .delete()\r\n      .eq('id', id);\r\n    navigate('/read');\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchComments = async () => {\r\n      const { data, error } = await supabase\r\n        .from('Comments') // Make sure this matches your table name\r\n        .select()\r\n        .eq('postId', id); // Ensure 'postId' matches the column name in your Comments table that references the post ID\r\n\r\n      if (error) {\r\n        console.error('Error fetching comments:', error.message);\r\n      } else {\r\n        setComments(data);\r\n      }\r\n    };\r\n\r\n    fetchComments();\r\n  }, [id]); // Re-fetch comments when the post ID changes\r\n\r\n  const submitComment = async (event) => {\r\n    event.preventDefault(); // Prevent the default form submission behavior\r\n    if (!comment.trim()) return; // Ignore empty comments\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('Comments') // Ensure this is the correct table name\r\n        .insert([\r\n          { postId: id, comment: comment } // Assuming 'postId' is the correct field name\r\n        ]);\r\n\r\n      if (error) {\r\n        console.error('Error submitting comment:', error.message);\r\n      } else {\r\n        // Optionally, refresh comments list here\r\n        // This could be a call to fetchComments() if you define it outside useEffect\r\n        const { data, error } = await supabase\r\n          .from('Comments')\r\n          .select()\r\n          .eq('postId', id);\r\n\r\n        if (error) {\r\n          console.error('Error fetching comments:', error.message);\r\n        } else {\r\n          setComments(data);\r\n        }\r\n      }\r\n\r\n      setComment(\"\"); // Clear the comment input field\r\n    } catch (error) {\r\n      console.error('Error submitting comment:', error.message);\r\n      // Handle the error appropriately (e.g., display a message to the user)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"DetailView\">\r\n      <div className=\"row1\">\r\n      {post.created_at && (\r\n        <p>Posted {formatDistanceToNow(new Date(post.created_at), { addSuffix: true })}</p>\r\n      )}\r\n      <Link to={`/edit/${id}`}><button> 🖋️</button></Link>\r\n      <button onClick={deletePost}> 🗑️</button>\r\n      </div>\r\n      <h2>{\"Title: \" + post.title}</h2>\r\n      {post.image && (<img src={post.image} alt={post.title} />)}\r\n      <p>{\"Author: \" + post.author}</p>\r\n      <p>{\"Description: \" + post.description}</p>\r\n      <button id='up' onClick={updateCount}>👍 {count} upvotes</button>\r\n      <div className=\"comments\">\r\n      <h3>Comments</h3>\r\n      <div>\r\n      <ul>\r\n  {comments.map((comment, index) => (\r\n    <li key={index}>{comment.comment}</li>\r\n  ))}\r\n</ul>\r\n      </div>\r\n        <form onSubmit={submitComment}>\r\n          <input\r\n            type=\"text\"\r\n            value={comment}\r\n            onChange={(e) => setComment(e.target.value)}\r\n            placeholder=\"Write a comment...\"\r\n          />\r\n          <button type=\"submit\">Submit Comment</button>\r\n        </form>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}