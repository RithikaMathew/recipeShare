{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rithi\\\\OneDrive\\\\Desktop\\\\web stack\\\\final - Copy\\\\client\\\\src\\\\pages\\\\ReadPosts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Card from '../components/Card';\nimport './ReadPosts.css';\nimport { supabase } from '../client';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReadPosts = ({\n  posts\n}) => {\n  _s();\n  const [filteredPosts, setFilteredPosts] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Function to sort by recent\n  const sortByRecent = () => {\n    const sorted = [...posts].sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n    setFilteredPosts(sorted);\n  };\n  useEffect(() => {\n    // Apply filtering directly here based on the search query\n    const filtered = posts.filter(post => post.title.toLowerCase().includes(searchQuery.toLowerCase()));\n    setFilteredPosts(filtered);\n  }, [posts, searchQuery]); // React to changes in `posts` or `searchQuery`\n\n  // Sort by recent on component mount\n  useEffect(() => {\n    sortByRecent();\n  }, [posts]); // Ensure this runs only once when the component mounts or when `posts` changes\n\n  const sortByUpvotes = () => {\n    const sorted = [...filteredPosts].sort((a, b) => {\n      // Ensure we have valid numbers for comparison\n      const upvotesA = Number(a.upvotes) || 0;\n      const upvotesB = Number(b.upvotes) || 0;\n      return upvotesB - upvotesA;\n    });\n    setFilteredPosts(sorted);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ReadPosts\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by title...\",\n        value: searchQuery,\n        onChange: e => setSearchQuery(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sortByUpvotes,\n        children: \"Most Popular\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sortByRecent,\n        children: \"Most Recent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), filteredPosts && filteredPosts.length > 0 ? filteredPosts.map((post, index) => /*#__PURE__*/_jsxDEV(Card, {\n      id: post.id,\n      title: post.title,\n      author: post.author,\n      createdAt: post.created_at\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: 'black'\n      },\n      children: 'No matching posts ðŸ˜ž'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(ReadPosts, \"fBsX+1ht/8j9RMj1rYg5JZKSB8U=\");\n_c = ReadPosts;\nexport default ReadPosts;\nvar _c;\n$RefreshReg$(_c, \"ReadPosts\");","map":{"version":3,"names":["React","useState","useEffect","Card","supabase","useParams","jsxDEV","_jsxDEV","ReadPosts","posts","_s","filteredPosts","setFilteredPosts","searchQuery","setSearchQuery","sortByRecent","sorted","sort","a","b","Date","created_at","filtered","filter","post","title","toLowerCase","includes","sortByUpvotes","upvotesA","Number","upvotes","upvotesB","className","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","index","id","author","createdAt","style","color","_c","$RefreshReg$"],"sources":["C:/Users/rithi/OneDrive/Desktop/web stack/final - Copy/client/src/pages/ReadPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from '../components/Card';\nimport './ReadPosts.css';\nimport { supabase } from '../client';\nimport { useParams } from 'react-router-dom';\n\nconst ReadPosts = ({ posts }) => {\n    const [filteredPosts, setFilteredPosts] = useState([]);\n    const [searchQuery, setSearchQuery] = useState('');\n\n    // Function to sort by recent\n    const sortByRecent = () => {\n        const sorted = [...posts].sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n        setFilteredPosts(sorted);\n    };\n\n    useEffect(() => {\n        // Apply filtering directly here based on the search query\n        const filtered = posts.filter(post => \n            post.title.toLowerCase().includes(searchQuery.toLowerCase())\n        );\n        setFilteredPosts(filtered);\n    }, [posts, searchQuery]); // React to changes in `posts` or `searchQuery`\n\n    // Sort by recent on component mount\n    useEffect(() => {\n        sortByRecent();\n    }, [posts]); // Ensure this runs only once when the component mounts or when `posts` changes\n\n    const sortByUpvotes = () => {\n        const sorted = [...filteredPosts].sort((a, b) => {\n            // Ensure we have valid numbers for comparison\n            const upvotesA = Number(a.upvotes) || 0;\n            const upvotesB = Number(b.upvotes) || 0;\n            return upvotesB - upvotesA;\n        });\n        setFilteredPosts(sorted);\n    };\n\n    return (\n        <div className=\"ReadPosts\">\n            <div className=\"filter\">\n            <input\n                type=\"text\"\n                placeholder=\"Search by title...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n            />\n            <button onClick={sortByUpvotes}>Most Popular</button>\n            <button onClick={sortByRecent}>Most Recent</button>\n            </div>\n            {filteredPosts && filteredPosts.length > 0 ? (\n                filteredPosts.map((post, index) => (\n                    <Card\n                        key={index}\n                        id={post.id}\n                        title={post.title}\n                        author={post.author}\n                        createdAt={post.created_at}\n                    />\n                ))\n            ) : (\n                <h2 style={{ color: 'black' }}>{'No matching posts ðŸ˜ž'}</h2>\n            )}\n        </div>\n    );\n};\n\nexport default ReadPosts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}